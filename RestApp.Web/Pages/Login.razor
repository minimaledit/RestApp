@page "/login"
@inherits LoginModel

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using RestApp.Services.Contract;
@inject IUserService _userservice
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" @bind-Value="email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" @bind-value="pass" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@click" Disabled="@(!success)" Class="ml-auto">Log in</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string email;
    string pass;
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
        }
    }
    async Task click()
    {
        try
        {
            var ifexist = await _userservice.GetByEmail(email);
            if(ifexist.Password == pass)
            {
                LoginAsync(pass, email);
            }
            else
            {
                errors = new string[] { "Wrong password!" };
            }
        }
        catch (HttpRequestException)
        {
            errors = new string[] { "User with this e-mail doesn't exist. Go to registration page or write correct e-mail." };
        }
    }
}