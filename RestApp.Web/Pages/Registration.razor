@page "/registration"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using RestApp.ReservationDto;
@using RestApp.Services.Contract;
@using System.Net.Http;
@using BlazorAuthentification1;
@inject IUserService _userservice
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<AuthorizeView>
    <Authorized>
        
    </Authorized>
    <NotAuthorized>    
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" @bind-Value = "user_name" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Email" @bind-value = "emailadress" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" @bind-value = "passwrd" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@register" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Inject] public NavigationManager NavigationManager { get; set; }
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string emailadress;
    string passwrd;
    string user_name;
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;

    }
    async Task register()
    {

        var userToCreate = new UserDto { 
            Name = user_name,
            Email = emailadress,
            Password = passwrd
        };

        try
        {
            var ifexist = await _userservice.GetByEmail(emailadress);
            errors = new string[] { "User with this email already exists. Please choose a different email address." };
        }
        catch (HttpRequestException)
        {
            _userservice.Create(userToCreate);
            NavigationManager.NavigateTo("/", true);
        }
         
    }
}